import re

from django.db import transaction
import aiogram
from asgiref.sync import sync_to_async
from django.core.exceptions import ObjectDoesNotExist
from aiogram import types
from aiogram.types import ContentType, update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, message
from order.models import Order
from courier.models import CourierOrder
from .telegram_settings import dp, bot
from .helpers import search_courier_by_phone, search_courier_by_telegram_id, \
    search_courier_by_telegram_id_, on_delivery_by_telegram_id, end_delivery_by_telegram_id_, writing_telegram_id
from .courier_keyboard import create_auth_kb, create_main_menu_kb, create_start_working_kb, \
    create_confirm_stop_working_kb, create_allowed_order, create_delivered_order
from ..models import CourierInfo

auth_kb = create_auth_kb()
main_menu_kb = create_main_menu_kb()
start_working_kb = create_start_working_kb()
confirm_stop_working_kb = create_confirm_stop_working_kb()


@dp.message_handler(commands=['help'])
async def helper(message: types.Message):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–ª—É–∂–∏—Ç –º–∞–Ω—É–∞–ª–æ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—É—Ç–µ–º –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ —Å–ª—ç—à–∞
    """
    await bot.send_message(message.from_user.id,
                           '''
                           –ü—Ä–∏–≤–µ—Ç!üôÇ\n
                           –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.\n
                           –î–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, —á—Ç–æ –∫ —á–µ–º—É üòé\n
                           –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏\n üîé–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n–°–ª–µ–¥—É–π —É–∫–∞–∑–∞–Ω–∏—è–º –Ω–∞ –∫–Ω–æ–ø–∫–µ.\n
                           üëã –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É- –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç–≤–æ–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å\n–ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –∑–∞–∫–∞–∑—ã - –∑–¥–µ—Å—å —Ç—ã —É–≤–∏–¥–∏—à—å 
                           –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑—ã –∏ —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö\n
                           ‚õîÔ∏è –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É - —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ —Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç–∞—Ç—å\n–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–∞–∂–º–∏\nüëã –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É''')


@dp.message_handler(commands=['start'])
async def start_chat(message: types.Message):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. –ú–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–≤–∏–¥—É –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
    –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Å—Ç–æ–π—Å—Ç–≤–∞—Ö.
    """
    await message.reply(text='–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è ))',
                        reply_markup=auth_kb)


@dp.message_handler(content_types=ContentType.CONTACT)
async def courier_phone_auth(message: types.contact):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∫—É—Ä—å–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É. –ó–∞—Ç–µ–º –∏–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ
    –¥–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–ø–∏—Å–∏ —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—É—Ä—å–µ—Ä–∞ –∏ –∏–¥–µ—Ç
    –∑–∞–ø–∏—Å—å id —á–∞—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã ‚úÖ' –∏ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.
    """
    courier_phone = await search_courier_by_phone(message['contact']['phone_number'])
    if courier_phone['phone'] == message.contact.phone_number:
        ct = courier_phone['phone']
        telegram_id_recieve = str(message.from_user.id)
        await bot.send_message(message.from_user.id, '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã ‚úÖ', reply_markup=start_working_kb)
        await writing_telegram_id(ct, telegram_id_recieve)
    else:
        await bot.send_message(message.from_user.id, '–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é ‚õîÔ∏è')


@dp.message_handler(regexp='–û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É')
async def start_day(message: types.Message):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–µ–Ω—è–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∫—É—Ä—å–µ—Ä–∞ "–†–∞–±–æ—Ç–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è" –Ω–∞ True. –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã –Ω–∞ id —á–∞—Ç–∞ –∫—É—Ä—å–µ—Ä–∞
    —Å —É—á–µ—Ç–æ–º –µ–≥–æ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã–º–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞–º–∏.
    """
    on_working = await search_courier_by_telegram_id(message['from']['id'])
    await bot.send_message(message.from_user.id, text='–í–∞—à–∞ —Å–º–µ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –ü—Ä–∏—Å—Ç—É–ø–∏–º!', reply_markup=main_menu_kb)


@dp.message_handler(regexp='–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É')
async def stop_day(message: types.Message):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–µ–Ω—è–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∫—É—Ä—å–µ—Ä–∞ "–†–∞–±–æ—Ç–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è" –Ω–∞ False. –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã –Ω–∞ id —á–∞—Ç–∞
    –∫—É—Ä—å–µ—Ä–∞ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã. –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏ '–û—Ç–º–µ–Ω–∏—Ç—å'.
    """
    await bot.send_message(message.from_user.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–º–µ–Ω—ã',
                           reply_markup=confirm_stop_working_kb)


@dp.message_handler(commands=['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'])
async def register_handlers_courier(message: types.Message):
    await message.reply('')


@dp.callback_query_handler(lambda c: c.data == 'allow_stop_day')
async def process_callback_button1(callback_query: types.CallbackQuery):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–µ–Ω—è–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∫—É—Ä—å–µ—Ä–∞ "–†–∞–±–æ—Ç–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è" –Ω–∞ False.
    """
    on_working = await search_courier_by_telegram_id_(callback_query['from']['id'])
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í–∞—à–∞ —Å–º–µ–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!', reply_markup=start_working_kb)
    await callback_query.message.delete()


@dp.message_handler(commands=['–û—Ç–º–µ–Ω–∏—Ç—å'])
async def register_handlers_courier(message: types.Message):
    await message.reply('')


@dp.callback_query_handler(lambda c: c.data == 'cancel_stop_day')
async def process_callback_button1(callback_query: types.CallbackQuery):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—É—Ä—å–µ—Ä–∞ –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã –≤–º–µ—Å—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∏—Ç—å' —Ä–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã –∫—É—Ä—å–µ—Ä–æ–º.
    """
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.delete()


with transaction.atomic():
    @dp.message_handler(commands=['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'])
    async def register_handlers_courier(message: types.Message):
        """
        –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫—É—Ä—å–µ—Ä–∞
        –∏ –±—Ä–æ–Ω—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∑–∞ –Ω–∏–º. –ù–∞ —ç–∫—Ä–∞–Ω –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ. –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
        –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è. –ü—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –≤—ã–±–æ—Ä–µ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∑–∞–∫–∞–∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫—É—Ä—å–µ—Ä–∞–º–∏
        –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É, —Ä–∞–Ω—å—à–µ –≤—Å–µ—Ö –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–µ–º—É –≤—ã–±–æ—Ä –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞. –û—Å—Ç–∞–ª—å–Ω—ã–º –∫—É—Ä—å–µ—Ä–∞–º –ø—Ä–∏–¥–µ—Ç –æ—Ç–±–∏–≤–∫–∞
        –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
        """
        await message.reply('')


@dp.callback_query_handler(
    lambda c: re.match(
        r'accept_order__[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$', c.data))
async def process_status_change(callback_query: types.CallbackQuery):
    @sync_to_async
    def get_uuid_for_order(uuid, chat_id):
        try:
            with transaction.atomic():
                search_order = Order.objects.filter(uuid=uuid).get()
                search_courier = CourierOrder.objects.filter(order_id=search_order).get()
                if not search_courier.accepted_by_courier:
                    search_courier.accepted_by_courier = True
                    search_courier.save()
                    courier = CourierInfo.objects.filter(telegram=chat_id).first()
                    search_courier.courier = courier
                    search_courier.save()
                else:
                    return

        except TypeError:
            raise TypeError

        return dict(restaurant_name=search_courier.order.restaurant.name,
                    street=search_courier.order.street,
                    house=search_courier.order.house,
                    uuid=str(search_courier.order.uuid),
                    amount=str(search_courier.order.order_amount),
                    entrance=search_courier.order.entrance,
                    intercom=search_courier.order.intercom,
                    floor=search_courier.order.floor,
                    flat=search_courier.order.flat,
                    contact_name=search_courier.order.contact_name,
                    contact_phone=search_courier.order.contact_phone,
                    order_note=search_courier.order.order_note)

    change_status = await get_uuid_for_order(callback_query.data.split('__')[1], callback_query['from']['id'])
    if not change_status:
        await bot.send_message(callback_query.from_user.id, text='–£–ø—Å... –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –∫—Ç–æ-—Ç–æ –≤–∑—è–ª',
                               reply_markup=main_menu_kb)
        # await callback_query.message.delete()
        return
    text = f'<b>–ó–∞–∫–∞–∑ –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:</b> {change_status["restaurant_name"]}\n<b>–î–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É:</b>\n—É–ª. {change_status["street"]}, –¥. ' \
           f'{change_status["house"]}, –ø. {change_status["entrance"]}, –¥. {change_status["intercom"]}, —ç—Ç. {change_status["floor"]}, –∫–≤. ' \
           f'{change_status["flat"]}\n<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</b>\n{change_status["contact_name"]}\n<b>—Ç–µ–ª</b>. {change_status["contact_phone"]}\n' \
           f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</b>\n{change_status["order_note"]}'
    on_working = await on_delivery_by_telegram_id(callback_query['from']['id'])
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text=text, parse_mode='html',
                           reply_markup=create_delivered_order(change_status["uuid"]))
    # await callback_query.message.delete()


@dp.message_handler(commands=['–û—Ç–º–µ–Ω–∏—Ç—å'])
async def register_handlers_courier(message: types.Message):
    await message.reply('')


@dp.callback_query_handler(lambda c: c.data == 'canceled_order')
async def cancel_allow_order(callback_query: types.CallbackQuery):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∑–∞–∫–∞–∑–∞ –∏ "–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç" –≤ –º–µ–Ω—é - —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.
    """
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.delete()
    await bot.send_message(callback_query.from_user.id, text='–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –º–µ–Ω—é', reply_markup=main_menu_kb)



@dp.message_handler(regexp='–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω')
async def delivery_order(message: types.Message):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–∞—Ö. –ú–µ–Ω—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞
    "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
    """
    await message.reply('')


@dp.callback_query_handler(
    lambda c: re.match(
        r'order_is_delivered__[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$',
        c.data))
async def process_order_status_change(callback_query: types.CallbackQuery):
    @sync_to_async
    def get_uuid_for_changing_order(uuid):
        search_order_for_status = Order.objects.filter(uuid=uuid).get()
        search_order_for_status.order_status = 'delivered'
        search_order_for_status.save()

    change_status = await get_uuid_for_changing_order(callback_query.data.split('__')[1])
    on_working = await end_delivery_by_telegram_id_(callback_query['from']['id'])
    text = '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!'
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text=text, reply_markup=main_menu_kb)


@dp.callback_query_handler(
    lambda c: re.match(
        r'show_order__[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$',
        c.data))
async def process_order(callback_query: types.CallbackQuery):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –∫—É—Ä—å–µ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ.
    """

    @sync_to_async
    def get_order_by_uuid(uuid):
        try:
            search_order = Order.objects.filter(uuid=uuid).get()
            search_courier = CourierInfo.objects.filter(location=search_order.restaurant.location.id).first()

        except ObjectDoesNotExist as exc:
            raise ObjectDoesNotExist
        if search_courier.location.id == search_order.restaurant.location.id:
            return dict(restaurant_name=search_order.restaurant.name,
                        street=search_order.street,
                        house=search_order.house,
                        uuid=str(search_order.uuid),
                        amount=str(search_order.order_amount),
                        entrance=search_order.entrance,
                        intercom=search_order.intercom,
                        floor=search_order.floor,
                        flat=search_order.flat,
                        contact_name=search_order.contact_name,
                        contact_phone=search_order.contact_phone,
                        order_note=search_order.order_note)

    order = await get_order_by_uuid(callback_query.data.split('__')[1])
    text = f'<b>–ó–∞–∫–∞–∑ –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:</b> {order["restaurant_name"]}\n<b>–î–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É:</b>\n—É–ª. {order["street"]}, –¥. ' \
           f'{order["house"]}, –ø. {order["entrance"]}, –¥. {order["intercom"]}, —ç—Ç. {order["floor"]}, –∫–≤. ' \
           f'{order["flat"]}\n<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</b>\n{order["contact_name"]}\n<b>—Ç–µ–ª</b>. {order["contact_phone"]}\n' \
           f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</b>\n{order["order_note"]}'
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup=ReplyKeyboardRemove())
    # await bot.send_message(callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup=create_allowed_order())
    await bot.send_message(callback_query.from_user.id, text=text, parse_mode='html',
                           reply_markup=create_allowed_order(order['uuid']))
    # await callback_query.message.delete()
